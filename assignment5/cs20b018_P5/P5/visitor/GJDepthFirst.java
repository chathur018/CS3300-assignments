//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.awt.Stroke;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	String destReg;
	int inArgs, outArgs;
	boolean printLabel;

   Integer stackOffset;
   Integer extraOffset;

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      stackOffset = 0;
      extraOffset = 0;
      n.f0.accept(this, argu);
      System.out.println("\t\t.text");
      System.out.println("\t\t.globl\t\t\tmain");
      System.out.println("main:");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      Integer reqStack = (Integer)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      Integer maxCall = (Integer)n.f8.accept(this, argu);
      n.f9.accept(this, argu);

      if(maxCall > 4)
      {
         reqStack += maxCall - 4;
         extraOffset = maxCall - 4;
      }

      System.out.println("\t\tmove $fp $sp");
      System.out.println("\t\tsw $ra, -4($fp)");
      System.out.println("\t\tsubu $sp, $sp, "+(reqStack+1)*4);
      
      n.f10.accept(this, argu);

      System.out.println("\t\tlw $ra, -4($fp)");
      System.out.println("\t\taddu $sp, $sp, "+(reqStack+1)*4);
      System.out.println("\t\tjal _end\n");
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      
      System.out.println("\t\t.text");
      System.out.println("\t\t.globl\t\t\t_halloc");
      System.out.println("_halloc:");
      System.out.println("\t\tli $v0, 9");
      System.out.println("\t\tsyscall");
      System.out.println("\t\tjr $ra\n");

      System.out.println("\t\t.text");
      System.out.println("\t\t.globl\t\t\t_print");
      System.out.println("_print:");
      System.out.println("\t\tli $v0, 1");
      System.out.println("\t\tsyscall");
      System.out.println("\t\tla $a0, newl");
      System.out.println("\t\tli $v0, 4");
      System.out.println("\t\tsyscall");
      System.out.println("\t\tjr $ra\n");

      System.out.println("\t\t.text");
      System.out.println("\t\t.globl\t\t_end");
      System.out.println("_end:");
      System.out.println("\t\tli $v0, 10");
      System.out.println("\t\tsyscall\n");

      System.out.println("\t\t.data");
      System.out.println("\t\t.align\t0");
      System.out.println("newl:\t.asciiz\t\"\\n\"");

      System.out.println("\t\t.data");
      System.out.println("\t\t.align\t0");
      System.out.println("str_er:\t.asciiz\t\" ERROR: abnormal termination\\n\"");
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      printLabel = true;
      n.f0.accept(this, argu);
      printLabel = false;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;

      printLabel = false;
      stackOffset = 0;
      extraOffset = 0;
      String proc = (String)n.f0.accept(this, argu);
      System.out.println("\t\t.text");
      System.out.println("\t\t.globl\t\t\t"+proc);
      System.out.println(proc+":");
      n.f1.accept(this, argu);
      Integer noArgs = (Integer)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      Integer reqStack = (Integer)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      Integer maxCall = (Integer)n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      
      if(noArgs > 4)
      {
         stackOffset = noArgs - 4;
         reqStack -= noArgs - 4;
      }
      if(maxCall > 4)
      {
         reqStack += maxCall - 4;
         extraOffset = maxCall - 4;
      }

      System.out.println("\t\tsw $fp, -8($sp)");
      System.out.println("\t\tmove $fp $sp");
      System.out.println("\t\tsubu $sp, $sp, "+(reqStack+2)*4);
      System.out.println("\t\tsw $ra, -4($fp)");
      
      n.f10.accept(this, argu);

      System.out.println("\t\tlw $ra, -4($fp)");
      System.out.println("\t\tlw $fp, "+(reqStack)*4+"($sp)");
      System.out.println("\t\taddu $sp, $sp, "+(reqStack+2)*4);
      System.out.println("\t\tjr $ra\n");
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      
      
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      printLabel = false;
      //System.out.print("\t\t");
      n.f0.accept(this, argu);
      printLabel = true;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("\t\tnop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("\t\tla $a0, str_er");
      System.out.println("\t\tsyscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      String label = (String)n.f2.accept(this, argu);

      System.out.println("\t\tbeqz "+reg+" "+label);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String label = (String)n.f1.accept(this, argu);

      System.out.println("\t\tb "+label);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = (String)n.f1.accept(this, argu);
      Integer offset = (Integer)n.f2.accept(this, argu);
      String reg2 = (String)n.f3.accept(this, argu);
      
      System.out.println("\t\tsw "+reg2+" "+offset+"("+reg1+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = (String)n.f1.accept(this, argu);
      String reg2 = (String)n.f2.accept(this, argu);
      Integer offset = (Integer)n.f3.accept(this, argu);
      
      System.out.println("\t\tlw "+reg1+" "+offset+"("+reg2+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = (String)n.f1.accept(this, argu); 
      
      if((Integer)n.f2.accept(this, (A)"1") == 0)
      {
         n.f2.accept(this, (A)"2");
         System.out.println("\t\tmove "+reg1+" $v0");
      }
      else if((Integer)n.f2.accept(this, (A)"1") == 1)
      {
         String op = (String)n.f2.accept(this, (A)"3");
         System.out.print("\t\t"+op+" "+reg1+", ");
         n.f2.accept(this, (A)"2");
      }
      else if((Integer)n.f2.accept(this, (A)"1") == 2)
      {
         if((Integer)n.f2.accept(this, (A)"3") == 0)
         {
            String reg2 = (String)n.f2.accept(this, (A)"4");
            System.out.println("\t\tmove "+reg1+" "+reg2);
         }
         else if((Integer)n.f2.accept(this, (A)"3") == 1)
         {
            Integer i = (Integer)n.f2.accept(this, (A)"4");
            System.out.println("\t\tli "+reg1+" "+i);
         }
         else if((Integer)n.f2.accept(this, (A)"1") == 2)
         {
            String label = (String)n.f2.accept(this, (A)"4");
            System.out.println("\t\tla "+reg1+" "+label);
         }
      }

      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      if((Integer)n.f1.accept(this, (A)"1") == 0 || (Integer)n.f1.accept(this, (A)"1") == 2)
      {
         System.out.println("\t\tmove $a0 "+(String)n.f1.accept(this, (A)"2"));
      }
      else
      {
         System.out.println("\t\tli $a0 "+(Integer)n.f1.accept(this, (A)"2"));
      }
      
      System.out.println("\t\tjal _print");
      
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      Integer pos = (Integer)n.f2.accept(this, argu);
      
      if(pos < stackOffset)
      {
         System.out.println("\t\tlw "+reg+", "+pos*4+"($fp)");
      }
      else
      {
         System.out.println("\t\tlw "+reg+", "+(pos-stackOffset+extraOffset)*4+"($sp)");
      }

      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer pos = (Integer)n.f1.accept(this, argu);
      String reg = (String)n.f2.accept(this, argu);
      
      if(pos < stackOffset)
      {
         System.out.println("\t\tsw "+reg+", "+pos*4+"($fp)");
      }
      else
      {
         System.out.println("\t\tsw "+reg+", "+(pos-stackOffset+extraOffset)*4+"($sp)");
      }
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer pos = (Integer)n.f1.accept(this, argu) - 1;
      String reg = (String)n.f2.accept(this, argu);

      System.out.println("\t\tsw "+reg+", "+pos*4+"($sp)");
      
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      if((Integer)n.f1.accept(this, (A)"1") == 0)
      {
         String reg = (String)n.f1.accept(this, (A)"2");
         System.out.println("\t\tjalr "+reg);
      }
      else if((Integer)n.f1.accept(this, (A)"1") == 2)
      {
         String label = (String)n.f1.accept(this, (A)"2");
         //System.out.println("\t\tjalr "+label);
         System.out.println("\t\tla $v1 "+label);
         System.out.println("\t\tjalr $v1");
      }
      
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;

      if(argu == "1")
      {
         if(n.f0.which == 0)
            _ret = (R)(Integer)0;
         else if(n.f0.which == 1)
            _ret = (R)(Integer)1;
         else
            _ret = (R)(Integer)2;
      }
      else if(argu == "2")
      {
         _ret = n.f0.accept(this, null);
      }
      else if(argu == "3")
      {
         _ret = n.f0.accept(this, (A)"1");
      }
      else if(argu == "4")
      {
         _ret = n.f0.accept(this, (A)"2");
      }

      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      if((Integer)n.f1.accept(this, (A)"1") == 0)
      {
         String reg = (String)n.f1.accept(this, (A)"2");
         System.out.println("\t\tmove $a0, "+reg);
      }
      else if((Integer)n.f1.accept(this, (A)"1") == 1)
      {
         Integer i = (Integer)n.f1.accept(this, (A)"2");
         System.out.println("\t\tli $a "+i);
      }
      
      System.out.println("\t\tjal _halloc");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      if(argu == "1")
      {
         _ret = (R)n.f0.accept(this, argu);
      }
      else
      {
         String reg1 = (String)n.f1.accept(this, argu);
         
         System.out.print(reg1+", ");
         if((Integer)n.f2.accept(this, (A)"1") == 0)
         {
            String reg2 = (String)n.f2.accept(this, (A)"2");
            System.out.println(reg2);
         }
         else if((Integer)n.f2.accept(this, (A)"1") == 1)
         {
            Integer i = (Integer)n.f2.accept(this, (A)"2");
            System.out.println(i);
         }
      }
      
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      String op = (String)n.f0.accept(this, argu);

      if(op == "LE")
         op = "sle";
      else if(op == "NE")
         op = "sne";
      else if(op == "PLUS")
         op = "add";
      else if(op == "MINUS")
         op = "sub";
      else if(op == "TIMES")
         op = "mul";
      else if(op == "DIV")
         op = "div";

      _ret = (R)op;
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer pos = (Integer)n.f1.accept(this, argu);
      _ret = (R)pos;
      return _ret;
      
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;

      if(argu == "1")
      {
         if(n.f0.which == 0)
            _ret = (R)(Integer)0;
         else if(n.f0.which == 1)
            _ret = (R)(Integer)1;
         else
            _ret = (R)(Integer)2;
      }
      else if(argu == "2")
      {
         _ret = n.f0.accept(this, argu);
      }
      
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      String reg = "$"+(String)n.f0.accept(this, argu);
      //System.out.println(reg);
      _ret = (R)reg;
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      Integer i = Integer.parseInt((String)n.f0.accept(this, argu));
      //System.out.println(i);
      _ret = (R)i;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      String label = (String)n.f0.accept(this, argu);
      if(printLabel)
         System.out.print(label+":");
      _ret = (R)label;
      return _ret;
      
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
