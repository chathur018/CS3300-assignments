//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
  
	int passNo;
   Integer currNoTemps;
   String currentClass;
   Integer tempNoVars;
   Integer currLabelNo;

   HashMap<String, HashMap> classVars = new HashMap<>();
   HashMap<String, HashMap> classMethods = new HashMap<>();
   HashMap<String, HashMap> classObjs = new HashMap<>();
   HashMap<String, HashMap> methodOffsets = new HashMap<>();
   HashMap<String, Integer> tempVarList = new HashMap<>();
   HashMap<String, String> tempMthdList = new HashMap<>();
   HashMap<String, String> tempClassObjs = new HashMap<>();
   Vector<Integer> exprsnOffsets = new Stack<>();
   HashMap<String, String> tempObjs = new HashMap<>();
   HashMap<String, String> procTypes = new HashMap<>();

   class Q{
      String type;
      Integer temp;

      Q()
      {
         type = null;
         temp = null;
      }
   }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      passNo = 0;

      //n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      /*
      System.out.println(classVars);
      System.out.println(classMethods);
      System.out.println(methodOffsets);
      System.out.println(procTypes);
      */
      
      passNo = 1;
      currLabelNo = 0;
      
      System.out.println("MAIN");
      n.f0.accept(this, argu);
      System.out.println("END");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      currNoTemps = -1;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, (A)"");
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(passNo == 0)
      {
         n.f0.accept(this, argu);
         String id = (String)n.f1.accept(this, argu);
         currentClass = id;
         n.f2.accept(this, argu);
         tempVarList.clear();
         tempClassObjs.clear();
         n.f3.accept(this, argu);
         classObjs.put(id, (HashMap)tempClassObjs.clone());
         //HashMap<String, Integer> varList = (HashMap)tempVarList.clone();
         classVars.put(id, (HashMap)tempVarList.clone());
         tempMthdList.clear();
         n.f4.accept(this, argu);
         //HashMap<String, String> mthdList = (HashMap)tempMthdList.clone();
         classMethods.put(currentClass, (HashMap)tempMthdList.clone());
         n.f5.accept(this, argu);
         //System.out.println(mthdList);
         HashMap<String, Integer> offsetList = new HashMap<>();
         for(Map.Entry<String, String> e : tempMthdList.entrySet())
            offsetList.put(e.getValue(), offsetList.size());
         //System.out.println(offsetList);
         methodOffsets.put(currentClass, (HashMap)offsetList.clone());
      }
      
      if(passNo == 1)
      {
         n.f0.accept(this, argu);
         String id = (String)n.f1.accept(this, argu);
         currentClass = id;
         n.f2.accept(this, argu);
         //n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(passNo == 0)
      {
         n.f0.accept(this, argu);
         String id = (String)n.f1.accept(this, argu);
         currentClass = id;
         n.f2.accept(this, argu);
         tempVarList.clear();
         String parent = (String)n.f3.accept(this, argu);
         tempVarList = (HashMap<String,Integer>)(((HashMap)classVars.get(parent)).clone());
         n.f4.accept(this, argu);
         tempClassObjs.clear();
         tempClassObjs = (HashMap<String,String>)(((HashMap)classObjs.get(parent)).clone());
         n.f5.accept(this, argu);
         classObjs.put(id, (HashMap)tempClassObjs.clone());
         classVars.put(currentClass, (HashMap)tempVarList.clone());
         tempMthdList.clear();
         tempMthdList = (HashMap<String,String>)(((HashMap)classMethods.get(parent)).clone());
         n.f6.accept(this, argu);
         classMethods.put(currentClass, (HashMap)tempMthdList.clone());
         n.f7.accept(this, argu);
         HashMap<String, Integer> offsetList = new HashMap<>();
         for(Map.Entry<String, String> e : tempMthdList.entrySet())
            offsetList.put(e.getValue(), offsetList.size());
         methodOffsets.put(currentClass, (HashMap)offsetList.clone());
      }

      if(passNo == 1)
      {
         n.f0.accept(this, argu);
         String id = (String)n.f1.accept(this, argu);
         currentClass = id;
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         //n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type = (String)n.f0.accept(this, argu);
      String id = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(tempVarList.containsKey(id))
         ;
      else
         tempVarList.put(id, tempVarList.size());
      procTypes.put(id, type);
      tempObjs.put(id, type);
      if(passNo == 0)
         tempClassObjs.put(id, type);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(passNo == 0)
      {
         n.f0.accept(this, argu);
         String id = (String)n.f1.accept(this, argu);
         String name = (String)n.f2.accept(this, argu);
         String procedure = currentClass + "_" + name;
         procTypes.put(procedure, id);
         tempMthdList.put(name, procedure);
         n.f3.accept(this, argu);
         //tempNoVars = 0;
         //n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         //System.out.println(currentClass+"_"+id+" "+);
         n.f6.accept(this, argu);
         //n.f7.accept(this, argu);
         //n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         //n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
      }

      if(passNo == 1)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String id = (String)n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         tempNoVars = 1;
         tempVarList.clear();
         tempObjs.clear();
         tempObjs = (HashMap<String,String>)((HashMap<String,String>)classObjs.get(currentClass)).clone();
         tempObjs.put("this", currentClass);
         tempVarList.put("this", 0);
         n.f4.accept(this, argu);
         //System.out.println(tempObjs);
         n.f5.accept(this, argu);
         //if(tempNoVars != tempVarList.size())
            //System.out.println("error?");
         System.out.println(currentClass+"_"+id+" ["+tempVarList.size()+"]");
         //System.out.println(tempObjs);
         System.out.println("BEGIN");
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         //System.out.println(tempVarList);
         currNoTemps = tempVarList.size()-1;
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         Q q = (Q)n.f10.accept(this, (A)"");
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         System.out.println("RETURN TEMP "+q.temp);
         System.out.println("END");
      }

      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type = (String)n.f0.accept(this, argu);
      String id = (String)n.f1.accept(this, argu);
      if(tempVarList.containsKey(id))
         ;
      else
         tempVarList.put(id, tempVarList.size());
      tempNoVars++;
      tempObjs.put(id, type);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R)"int[]";
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)"boolean";
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)"int";
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A)"");
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Q q1 = (Q)n.f0.accept(this, (A)"1");
      String id = (String)n.f0.accept(this, null);
      //System.out.println(id);
      n.f1.accept(this, argu);
      Q q2 = (Q)n.f2.accept(this, (A)"3"); 
      n.f3.accept(this, argu);
      //System.out.println(tempObjs);

      if(q1.temp >= 0)
         System.out.println("MOVE TEMP "+q1.temp+" TEMP "+q2.temp);
      else
      {
         q1 = (Q)n.f0.accept(this, (A)"2");
         System.out.println("HSTORE TEMP 0 "+q1.temp+" TEMP "+q2.temp);
      }

      if(q2.type != null)
      {
         tempObjs.put(id, q2.type);
         //System.out.println(q2.type);
         //System.out.println(tempObjs);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN1 = ++currNoTemps;
      Integer tempN2 = ++currNoTemps;
      Integer tempN3 = ++currNoTemps;
      Integer tempN4 = ++currNoTemps;
      Integer tempN5 = ++currNoTemps;

      Q q1 = (Q)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Q q2 = (Q)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      Q q3 = (Q)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      //System.out.println(temp2);

      System.out.println("MOVE TEMP "+tempN1+" 1");
      System.out.println("MOVE TEMP "+tempN2+" PLUS TEMP "+q2.temp+" TEMP "+tempN1);
      System.out.println("MOVE TEMP "+tempN3+" 4");
      System.out.println("MOVE TEMP "+tempN4+" TIMES TEMP "+tempN2+" TEMP "+tempN3);
      System.out.println("MOVE TEMP "+tempN5+" PLUS TEMP "+q1.temp+" TEMP "+tempN4);
      System.out.println("HSTORE TEMP "+tempN5+" 0 TEMP "+q3.temp);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer label1 = ++currLabelNo;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Q q = (Q)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println("CJUMP TEMP "+q.temp+" L"+label1);
      n.f4.accept(this, argu);
      System.out.println("L"+label1);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      //System.out.println(currNoTemps);
      Integer label1 = ++currLabelNo;
      Integer label2 = ++currLabelNo;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Q q = (Q)n.f2.accept(this, argu);
      //System.out.println(temp);
      n.f3.accept(this, argu);
      System.out.println("CJUMP TEMP "+q.temp+" L"+label1);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      System.out.println("JUMP L"+label2);
      System.out.println("L"+label1);
      n.f6.accept(this, argu);
      System.out.println("L"+label2);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN = ++currNoTemps;
      Integer label1 = ++currLabelNo;
      Integer label2 = ++currLabelNo;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.println("L"+label1);
      Q q = (Q)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println("CJUMP TEMP "+q.temp+" L"+label2);
      n.f4.accept(this, argu);
      System.out.println("JUMP L"+label1);
      System.out.println("L"+label2);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Q q = (Q)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      System.out.println("PRINT TEMP "+q.temp);

      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN = ++currNoTemps;
      Integer label1 = ++currLabelNo;
      Integer label2 = ++currLabelNo;

      System.out.println("MOVE TEMP "+tempN+" 1");
      Q q1 = (Q)n.f0.accept(this, argu);
      System.out.println("CJUMP TEMP "+q1.temp+" L"+label1);
      n.f1.accept(this, argu);
      Q q2 = (Q)n.f2.accept(this, argu);
      System.out.println("CJUMP TEMP "+q2.temp+" L"+label1);
      System.out.println("JUMP L"+label2);
      System.out.println("L"+label1);
      System.out.println("MOVE TEMP "+tempN+" 0");
      System.out.println("L"+label2);
      Q ret = new Q();
      ret.temp = tempN;
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN = ++currNoTemps;
      Integer label1 = ++currLabelNo;
      Integer label2 = ++currLabelNo;
      Integer label3 = ++currLabelNo;

      System.out.println("MOVE TEMP "+tempN+" 1");
      Q q1 = (Q)n.f0.accept(this, argu);
      System.out.println("CJUMP TEMP "+q1.temp+" L"+label1);
      System.out.println("JUMP L"+label3);
      System.out.println("L"+label1);
      n.f1.accept(this, argu);
      Q q2 = (Q)n.f2.accept(this, argu);
      System.out.println("CJUMP TEMP "+q2.temp+" L"+label2);
      System.out.println("JUMP L"+label3);
      System.out.println("L"+label2);
      System.out.println("MOVE TEMP "+tempN+" 0");
      System.out.println("L"+label3);
      Q ret = new Q();
      ret.temp = tempN;
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN = ++currNoTemps;
      //System.out.println(currNoTemps);
      
      Q q1 = (Q)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Q q2 = (Q)n.f2.accept(this, argu);

      System.out.println("MOVE TEMP "+tempN+" LE TEMP "+q1.temp+" TEMP "+q2.temp);
      Q ret = new Q();
      ret.temp = tempN;
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN = ++currNoTemps;
      
      Q q1 = (Q)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Q q2 = (Q)n.f2.accept(this, argu);

      System.out.println("MOVE TEMP "+tempN+" NE TEMP "+q1.temp+" TEMP "+q2.temp);
      Q ret = new Q();
      ret.temp = tempN;
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN = ++currNoTemps;
      
      Q q1 = (Q)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Q q2 = (Q)n.f2.accept(this, argu);

      System.out.println("MOVE TEMP "+tempN+" PLUS TEMP "+q1.temp+" TEMP "+q2.temp);
      Q ret = new Q();
      ret.temp = tempN;
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN = ++currNoTemps;
      
      Q q1 = (Q)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Q q2 = (Q)n.f2.accept(this, argu);

      System.out.println("MOVE TEMP "+tempN+" MINUS TEMP "+q1.temp+" TEMP "+q2.temp);
      Q ret = new Q();
      ret.temp = tempN;
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN = ++currNoTemps;
      
      Q q1 = (Q)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Q q2 = (Q)n.f2.accept(this, argu);

      System.out.println("MOVE TEMP "+tempN+" TIMES TEMP "+q1.temp+" TEMP "+q2.temp);
      Q ret = new Q();
      ret.temp = tempN;
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN = ++currNoTemps;
      
      Q q1 = (Q)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Q q2 = (Q)n.f2.accept(this, argu);

      System.out.println("MOVE TEMP "+tempN+" DIV TEMP "+q1.temp+" TEMP "+q2.temp);
      Q ret = new Q();
      ret.temp = tempN;
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN1 = ++currNoTemps;
      Integer tempN2 = ++currNoTemps;
      Integer tempN3 = ++currNoTemps;
      Integer tempN4 = ++currNoTemps;
      Integer tempN5 = ++currNoTemps;
      Integer tempN6 = ++currNoTemps;

      Q q1 = (Q)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Q q2 = (Q)n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      System.out.println("MOVE TEMP "+tempN1+" 1");
      System.out.println("MOVE TEMP "+tempN2+" PLUS TEMP "+q2.temp+" TEMP "+tempN1);
      System.out.println("MOVE TEMP "+tempN3+" 4");
      System.out.println("MOVE TEMP "+tempN4+" TIMES TEMP "+tempN2+" TEMP "+tempN3);
      System.out.println("MOVE TEMP "+tempN5+" PLUS TEMP "+q1.temp+" TEMP "+tempN4);
      System.out.println("HLOAD TEMP "+tempN6+" TEMP "+tempN5+" 0");

      Q ret = new Q();
      ret.temp = tempN6;
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN = ++currNoTemps;

      Q q = (Q)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      System.out.println("HLOAD TEMP "+tempN+" TEMP "+q.temp+" 0");
      Q ret = new Q();
      ret.temp = tempN;
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      //System.out.println(tempObjs);

      Q obj = (Q)n.f0.accept(this, (A)"3");
      //System.out.println(obj.type);
      //String id = (String)n.f0.accept(this, null);
      n.f1.accept(this, argu);
      String method = (String)n.f2.accept(this, null);
      String objClass;
      //if(obj.type == null)
         //objClass = tempObjs.get(id);
      //else
         objClass = obj.type;
      //System.out.println(((HashMap<String,String>)classMethods.get(currentClass)).get(method));
      //System.out.println(objClass);
      String procedure = ((HashMap<String,String>)classMethods.get(objClass)).get(method);
      //System.out.println(procedure);
      Integer offset = ((HashMap<String,Integer>)methodOffsets.get(objClass)).get(procedure);
      //System.out.println(tempObjs);
      //System.out.println(offset);
      n.f3.accept(this, argu);
      exprsnOffsets.clear();
      n.f4.accept(this, argu);
      //System.out.println(exprsnOffsets);
      n.f5.accept(this, argu);

      Integer tempN1 = ++currNoTemps;
      Integer tempN2 = ++currNoTemps;
      Integer tempN3 = ++currNoTemps;

      System.out.println("HLOAD TEMP "+tempN1+" TEMP "+obj.temp+" 0");
      System.out.println("HLOAD TEMP "+tempN2+" TEMP "+tempN1+" "+offset*4);
      System.out.print("MOVE TEMP "+tempN3+" CALL TEMP "+tempN2+" ( TEMP "+obj.temp);
      for(int i=0; i<exprsnOffsets.size(); i++)
      {
         System.out.print(" TEMP "+exprsnOffsets.get(i));
      }
      System.out.println(" )");

      Q ret = new Q();
      ret.temp = tempN3;
      ret.type = procTypes.get(procedure);
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Q offset = (Q)n.f0.accept(this, argu);
      exprsnOffsets.add(offset.temp);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      Q offset = (Q)n.f1.accept(this, argu);
      exprsnOffsets.add(offset.temp);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN = ++currNoTemps;

      String temp = (String)n.f0.accept(this, argu);
      System.out.println("MOVE TEMP "+tempN+" "+temp);
      Q ret = new Q();
      ret.temp = tempN;
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN = ++currNoTemps;
      
      n.f0.accept(this, argu);
      System.out.println("MOVE TEMP "+tempN+" 1");
      Q ret = new Q();
      ret.temp = tempN;
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN = ++currNoTemps;
      
      n.f0.accept(this, argu);
      System.out.println("MOVE TEMP "+tempN+" 0");
      Q ret = new Q();
      ret.temp = tempN;
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String temp = (String)n.f0.accept(this, argu);
      if(argu == null)
      {
         _ret = (R)temp;
      }
      else if(argu == "")
      {
         if(tempVarList.containsKey(temp))
         {
            Q ret = new Q();
            ret.temp = tempVarList.get(temp);
            _ret = (R)ret;
         }
         else
         {
            Integer offset = (((HashMap<String, Integer>)classVars.get(currentClass)).get(temp)+1)*4;
            Integer tempN = ++currNoTemps;

            System.out.println("HLOAD TEMP "+tempN+" TEMP 0 "+offset);

            Q ret = new Q();
            ret.temp = tempN;
            _ret = (R)ret;
         }
      }
      else if(argu == "1")
      {
         if(tempVarList.containsKey(temp))
         {
            Q ret = new Q();
            ret.temp = tempVarList.get(temp);
            _ret = (R)ret;
         }
         else
         {
            Q ret = new Q();
            ret.temp = (Integer)(-1);
            _ret = (R)ret;
         }
      }
      else if(argu == "2")
      {
         Integer offset = (((HashMap<String, Integer>)classVars.get(currentClass)).get(temp)+1)*4;
         Q ret = new Q();
         ret.temp = offset;
         _ret = (R)ret;
      }
      else if(argu == "3")
      {
         Q ret = new Q();
         if(tempVarList.containsKey(temp))
         {
            ret.temp = tempVarList.get(temp);
         }
         else
         {
            Integer offset = (((HashMap<String, Integer>)classVars.get(currentClass)).get(temp)+1)*4;
            Integer tempN = ++currNoTemps;

            System.out.println("HLOAD TEMP "+tempN+" TEMP 0 "+offset);
            ret.temp = tempN;
         }

         //System.out.println(tempObjs);
         //System.out.println(temp);
         if(tempObjs.containsKey(temp))
         {
            ret.type = tempObjs.get(temp);
            //System.out.println("b");
         }
         _ret = (R)ret;
      }
      /*
      else
      {
         Q ret = new Q();
         if(tempVarList.containsKey(temp))
         {
            ret.temp = tempVarList.get(temp);
         }
         else
         {
            Integer offset = (((HashMap<String, Integer>)classVars.get(currentClass)).get(temp)+1)*4;
            Integer tempN = ++currNoTemps;

            System.out.println("HLOAD TEMP "+tempN+" TEMP 0 "+offset);
            ret.temp = tempN;
         }

         //System.out.println(tempObjs);
         //System.out.println(argu);
         if(tempObjs.containsKey((String)argu))
         {
            ret.type = tempObjs.get((String)argu);
            System.out.println(ret.type);
         }
         _ret = (R)ret;
      }
      */
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      Q ret = new Q();
      ret.temp = tempVarList.get("this");
      ret.type = currentClass;
      _ret = (R)ret;
      //System.out.println((Integer)_ret);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN1 = ++currNoTemps;
      Integer tempN2 = ++currNoTemps;
      Integer tempN3 = ++currNoTemps;
      Integer tempN4 = ++currNoTemps;
      Integer tempN5 = ++currNoTemps;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      Q q = (Q)n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      System.out.println("MOVE TEMP "+tempN1+" 1");
      System.out.println("MOVE TEMP "+tempN2+" PLUS TEMP "+q.temp+" TEMP "+tempN1);
      System.out.println("MOVE TEMP "+tempN3+" 4");
      System.out.println("MOVE TEMP "+tempN4+" TIMES TEMP "+tempN2+" TEMP "+tempN3);
      System.out.println("MOVE TEMP "+tempN5+" HALLOCATE TEMP "+tempN4);
      System.out.println("HSTORE TEMP "+tempN5+" 0 TEMP "+q.temp);

      Q ret = new Q();
      ret.temp = tempN5;
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String name = (String)n.f1.accept(this, null);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      Integer tempN1 = ++currNoTemps;
      Integer tempN2 = ++currNoTemps;
      //System.out.println(tempN1);

      Integer objsize = (classVars.get(name).size()+1)*4;
      //System.out.println("MOVE TEMP "+tempN1+" "+objsize);
      System.out.println("MOVE TEMP "+tempN1+" HALLOCATE "+objsize);

      Integer funcTableSize = classMethods.get(name).size()*4;
      System.out.println("MOVE TEMP "+tempN2+" HALLOCATE "+funcTableSize);

      HashMap<String, Integer> offsets = (HashMap)methodOffsets.get(name);
      //System.out.println(offsets);
      for(Map.Entry<String, Integer> e : offsets.entrySet())
      {
         Integer tempN = ++currNoTemps;
         System.out.println("MOVE TEMP "+tempN+" "+e.getKey());
         System.out.println("HSTORE TEMP "+tempN2+" "+e.getValue()*4+" TEMP "+tempN);
      }

      System.out.println("HSTORE TEMP "+tempN1+" 0 TEMP "+tempN2);
      Q ret = new Q();
      ret.type = name;
      ret.temp = tempN1;
      //System.out.println(tempN1);
      _ret = (R)ret;

      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      Integer tempN = ++currNoTemps;
      Integer label1 = ++currLabelNo;

      n.f0.accept(this, argu);
      System.out.println("MOVE TEMP "+tempN+" 1");
      Q q = (Q)n.f1.accept(this, argu);
      System.out.println("CJUMP TEMP "+q.temp+" L"+label1);
      System.out.println("MOVE TEMP "+tempN+" 0");
      System.out.println("L"+label1);
      
      Q ret = new Q();
      ret.temp = tempN;
      _ret = (R)ret;
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
