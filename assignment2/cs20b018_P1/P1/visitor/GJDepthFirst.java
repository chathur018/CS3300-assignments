//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.

   void throwError()
   {
      System.out.println("Type error");
      System.exit(0);
   }

   class methodDetails{
      String returnType;
      Stack<String> types;
   }

   int pass;
   String currentClass;
   HashMap<String, String> classDefs = new HashMap<>();
   Stack<HashMap> variableDefStack = new Stack<>();
   HashMap<String, HashMap> methodDefs = new HashMap<>();
   HashMap<String, HashMap> classVars = new HashMap<>();

   Stack<String> tempMthdTypes = new Stack<>();
   HashMap<String, methodDetails> tempClsMthds = new HashMap<>();
   Vector<String> tempMthdNames = new Vector<>();

   String findType(String id)
   {
      Object sym = variableDefStack.clone();
      Stack<HashMap> symbolTable = (Stack)sym;
      while(!symbolTable.empty())
      {
         HashMap<String, String> scopeTable = symbolTable.pop();
         if(scopeTable.containsKey(id))
            return scopeTable.get(id);
      }
      //if(classDefs.containsKey(id))
         //return id;
      throwError();
      return "";
   }

   boolean typeMatch(String t1, String t2)
   {
      if(t1 == t2)
         return true;
      if(classDefs.containsKey(t1) && classDefs.containsKey(t2))
         return typeMatch(t1, classDefs.get(t2));
      
      return false;
   }

   boolean typesMatch(Stack<String> a, Stack<String> b)
   {
      if(a.empty() && b.empty())
         return true;
      
      if(a.empty() || b.empty())
         return false;

      String s1 = a.pop();
      String s2 = b.pop();
      //System.out.println(s1+" "+s2);

      if(typeMatch(s1, s2))
         return typesMatch(a, b);
      
      return false;
   }

   String findMethod(String cls, String name, Stack<String> s)
   {
      HashMap<String, methodDetails> h = (HashMap<String, methodDetails>)methodDefs.get(cls);
      //System.out.println(h);
      //System.out.println(name);
      if(h.containsKey(name))
      {
         //System.out.println(s);
         //System.out.println(h.get(name).types);
         Stack<String> temp1 = (Stack)h.get(name).types.clone();
         Stack<String> temp2 = (Stack)s.clone();
         if(typesMatch(temp1, temp2))
         {
            //System.out.println("a");
            return h.get(name).returnType;
         }
      }
      
      if(classDefs.get(cls) != "")
         return findMethod(classDefs.get(cls), name, s);
      
      return "";
   }

   boolean findOverload(String cls, String name, String rtype, Stack<String> s)
   {
      HashMap<String, methodDetails> h = (HashMap<String, methodDetails>)methodDefs.get(cls);
      if(h.containsKey(name))
      {
         if(!(h.get(name).types.equals(s) && h.get(name).returnType == rtype))
            return true;
      }

      if(classDefs.get(cls) != "")
         return findOverload(classDefs.get(cls), name, rtype, s);
      
      return false;
   }

   int pushSuperClassVars(String str, int n)
   {
      n++;
      if(classDefs.get(str) != "")
         n = pushSuperClassVars((String)classDefs.get(str), n);
      variableDefStack.push(classVars.get(str));
      return n;
   }
  
	public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      pass = 0;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      //System.out.println(classDefs);
      //System.out.println(methodDefs);

      //System.out.println("/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////");
      
      pass = 1;
      HashMap<String, String> ht = new HashMap<>();
      variableDefStack.push(ht);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      variableDefStack.pop();

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 0)
      {
         n.f0.accept(this, argu);
         String temp = (String)n.f1.accept(this, argu);
         classDefs.put(temp, "");
         //System.out.println(classDefs);
         n.f2.accept(this, argu);
         //HashMap<String, String> ht1 = new HashMap<>();
         //variableDefStack.push(ht1);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         //HashMap<String, String> ht2 = new HashMap<>();
         //variableDefStack.push(ht2);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         //variableDefStack.pop();
         n.f13.accept(this, argu);
         //HashMap<String, String> ht3 = new HashMap<>();
         //variableDefStack.push(ht3);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         //variableDefStack.pop();
         n.f16.accept(this, argu);
         //variableDefStack.pop();
      }
      
      if(pass == 1)
      {
         n.f0.accept(this, argu);
         String temp = (String)n.f1.accept(this, argu);
         //classDefs.put(temp, "");
         n.f2.accept(this, argu);
         HashMap<String, String> ht1 = new HashMap<>();
         variableDefStack.push(ht1);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         HashMap<String, String> ht2 = new HashMap<>();
         variableDefStack.push(ht2);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         variableDefStack.pop();
         n.f13.accept(this, argu);
         HashMap<String, String> ht3 = new HashMap<>();
         variableDefStack.push(ht3);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         variableDefStack.pop();
         n.f16.accept(this, argu);
         variableDefStack.pop();
      }
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 0)
      {
         tempClsMthds.clear();
         //System.out.println(tempClsMthds);
         n.f0.accept(this, argu);
         String temp = (String)n.f1.accept(this, argu);
         currentClass = temp;
         //System.out.println(temp);
         if(classDefs.containsKey(temp))
            throwError();
         else
         {
            classDefs.put(temp, "");
         }
         //System.out.println(classDefs);
         n.f2.accept(this, argu);
         //HashMap<String, String> ht1 = new HashMap<>();
         //variableDefStack.push(ht1);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         //variableDefStack.pop();

         tempMthdNames.clear();
         HashMap<String, HashMap> tempMap = (HashMap)tempClsMthds.clone();
         methodDefs.put(temp, tempMap);
         //System.out.println("aaaaaaaa" + temp);
         //System.out.println(methodDefs);
      }

      if(pass == 1)
      {
         //tempClsMthds.clear();
         n.f0.accept(this, argu);
         String temp = (String)n.f1.accept(this, argu);
         //System.out.println(temp);
         currentClass = temp;
         /*
         if(classDefs.containsKey(temp))
         {
            System.out.println("Type error");
            System.exit(0);
         }
         else
         {
            classDefs.put(temp, "");
         }
         */
         //System.out.println(classDefs);
         n.f2.accept(this, argu);
         HashMap<String, String> ht1 = new HashMap<>();
         variableDefStack.push(ht1);
         n.f3.accept(this, argu);
         HashMap<String, String> htt = (HashMap)variableDefStack.peek().clone();
         classVars.put(temp, htt);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         variableDefStack.pop();

         //methodDefs.put(temp, tempClsMthds);
      }
      //System.out.println(tempClsMthds);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 0)
      {
         n.f0.accept(this, argu);
         String temp1 = (String)n.f1.accept(this, argu);
         currentClass = temp1;
         n.f2.accept(this, argu);
         String temp2 = (String)n.f3.accept(this, argu);
         if(!classDefs.containsKey(temp2))
            throwError();

         if(classDefs.containsKey(temp1))
            throwError();
         else
         {
            classDefs.put(temp1, temp2);
         }
         //System.out.println(classDefs);
         n.f4.accept(this, argu);
         //HashMap<String, String> ht1 = new HashMap<>();
         //variableDefStack.push(ht1);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         //variableDefStack.pop();

         tempMthdNames.clear();
         HashMap<String, HashMap> tempMap = (HashMap)tempClsMthds.clone();
         methodDefs.put(temp1, tempMap);
      }

      if(pass == 1)
      {
         n.f0.accept(this, argu);
         String temp1 = (String)n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         String temp2 = (String)n.f3.accept(this, argu);
         currentClass = temp1;
         /*
         if(!classDefs.containsKey(temp2))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         if(classDefs.containsKey(temp1))
         {
            System.out.println("Type error");
            System.exit(0);
         }
         else
         {
            classDefs.put(temp1, temp2);
         }
         */
         //System.out.println(classDefs);
         int pops = pushSuperClassVars(temp2, 0);
         //System.out.println("pops "+ pops);
         n.f4.accept(this, argu);
         HashMap<String, String> ht1 = new HashMap<>();
         variableDefStack.push(ht1);
         n.f5.accept(this, argu);
         HashMap<String, String> htt = (HashMap)variableDefStack.peek().clone();
         classVars.put(temp1, htt);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         variableDefStack.pop();
         while(pops-- > 0)
            variableDefStack.pop();
      }
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 0)
      {
         String type = (String)n.f0.accept(this, argu);
         String id = (String)n.f1.accept(this, argu);
         //HashMap<String, String> ht = variableDefStack.pop();
         //System.out.println(id+" "+type);
         //System.out.println(ht);
         /*
         if(ht.containsKey(id))
         {
            System.out.println("Type error");
            System.exit(0);
         }
         else
         {
            ht.put(id, type);
         }
         */
         //System.out.println(ht);
         n.f2.accept(this, argu);
         //variableDefStack.push(ht);
      }

      if(pass == 1)
      {
         String type = (String)n.f0.accept(this, argu);
         String id = (String)n.f1.accept(this, argu);
         HashMap<String, String> ht = variableDefStack.pop();
         //System.out.println(id+" "+type);
         //System.out.println(ht);
         if(ht.containsKey(id))
            throwError();
         else
         {
            ht.put(id, type);
         }
         //System.out.println(ht);
         n.f2.accept(this, argu);
         variableDefStack.push(ht);
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 0)
      {
         tempMthdTypes.clear();
         
         n.f0.accept(this, argu);
         String temp1 = (String)n.f1.accept(this, argu);
         String temp2 = (String)n.f2.accept(this, argu);
         //System.out.println(temp2);
         n.f3.accept(this, argu);
         HashMap<String, String> ht1 = new HashMap<>();
         variableDefStack.push(ht1);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         variableDefStack.pop();
         n.f6.accept(this, argu);
         HashMap<String, String> ht2 = new HashMap<>();
         variableDefStack.push(ht2);
         n.f7.accept(this, argu);
         variableDefStack.pop();
         //System.out.println(ht2);
         //System.out.println(ht1);
         variableDefStack.push(ht1);
         variableDefStack.push(ht2);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         variableDefStack.pop();
         variableDefStack.pop();

         if(tempMthdNames.contains(temp2))
            throwError();

         tempMthdNames.add(temp2);

         if(classDefs.get(currentClass) != "")
            if(findOverload(classDefs.get(currentClass), temp2, temp1, tempMthdTypes))
               throwError();

         methodDetails m = new methodDetails();
         //m.methodName = temp2;
         m.returnType = temp1;
         m.types = (Stack)tempMthdTypes.clone();
         //System.out.println(m.returnType);
         //System.out.println(m);

         tempClsMthds.put(temp2, m);
      }

      if(pass == 1)
      {
         //tempMthdTypes.clear();
         //tempMthdArgs.clear();
         
         n.f0.accept(this, argu);
         String temp1 = (String)n.f1.accept(this, argu);
         String temp2 = (String)n.f2.accept(this, argu);
         //System.out.println(temp2);
         n.f3.accept(this, argu);
         HashMap<String, String> ht1 = new HashMap<>();
         variableDefStack.push(ht1);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         variableDefStack.pop();
         n.f6.accept(this, argu);
         HashMap<String, String> ht2 = new HashMap<>();
         variableDefStack.push(ht2);
         n.f7.accept(this, argu);
         variableDefStack.pop();
         //System.out.println(ht2);
         //System.out.println(ht1);
         variableDefStack.push(ht1);
         variableDefStack.push(ht2);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         String temp3 = (String)n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         variableDefStack.pop();
         variableDefStack.pop();

         if(temp1 != temp3)
            throwError();

         /*
         methodDetails m = new methodDetails();
         m.methodName = temp2;
         tempMthdDets.push(temp1);
         m.details = (Stack)tempMthdDets.clone();
         //System.out.println(m.details);

         tempClsMthds.add(m);
         */
      }
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 0)
      {
         String type = (String)n.f0.accept(this, argu);
         String id = (String)n.f1.accept(this, argu);
         HashMap<String, String> ht = variableDefStack.pop();
         //System.out.println(id+" "+type);
         //System.out.println(ht);
         if(ht.containsKey(id))
            throwError();
         else
         {
            ht.put(id, type);
         }
         //System.out.println(ht);
         variableDefStack.push(ht);

         tempMthdTypes.push(type);
      }

      if(pass == 1)
      {
         String type = (String)n.f0.accept(this, argu);
         String id = (String)n.f1.accept(this, argu);
         HashMap<String, String> ht = variableDefStack.pop();
         //System.out.println(id+" "+type);
         //System.out.println(ht);
         if(ht.containsKey(id))
            throwError();
         else
         {
            ht.put(id, type);
         }
         //System.out.println(ht);
         variableDefStack.push(ht);
      }
      
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      if(pass == 1)
         n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type1 = (String)n.f0.accept(this, (A)"1");
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      //System.out.println(type1+" "+type2);
      if(!typeMatch(type1, type2))
         throwError();
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type1 = (String)n.f0.accept(this, (A)"1");
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String type3 = (String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      //System.out.println(type1+" "+type2+" "+type3);
      if(type1 != "int[]" || type2 != "int" || type3 != "int")
         throwError();
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(type != "boolean")
         throwError();
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      //System.out.println("a");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(type != "boolean")
         throwError();
      //System.out.println("b");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(type != "boolean")
         throwError();
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(pass == 1 && type != "int")
         throwError();
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass == 1)
         _ret = n.f0.accept(this, (A)"1");
      //System.out.println((String)_ret);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      //System.out.println(type1 + " " + type2);
      if(type1 != "boolean" || type2 != "boolean")
         throwError();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      //System.out.println(type1 + " " + type2);
      if(type1 != "boolean" || type2 != "boolean")
         throwError();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      //System.out.println(type1 + " " + type2);
      if(type1 != "int" || type2 != "int")
         throwError();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      //System.out.println(type1 + " " + type2);
      if(type1 != "int" || type2 != "int")
         throwError();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      //System.out.println(type1 + "a" + type2);
      if(type1 != "int" || type2 != "int")
         throwError();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      //System.out.println(type1 + " " + type2);
      if(type1 != "int" || type2 != "int")
         throwError();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String type1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String type2 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      //System.out.println(type1 + " " + type2);
      if(type1 != "int[]" || type2 != "int")
         throwError();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      String type = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      //System.out.println(type);
      if(type != "int[]")
         throwError();
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      tempMthdTypes.clear();
      String type = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String method = (String)n.f2.accept(this, null);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      Stack<String> types = (Stack)tempMthdTypes.clone();
      //System.out.println(types);
      String returnType = findMethod(type, method, types);
      //System.out.println(returnType+" "+type+" "+method);
      if(returnType == "")
         throwError();
      _ret = (R)returnType;
      
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String temp = (String)n.f0.accept(this, argu);
      tempMthdTypes.push(temp);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String temp = (String)n.f1.accept(this, argu);
      tempMthdTypes.push(temp);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)n.f0.accept(this, (A)"1");
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret;
      String id = (String)n.f0.accept(this, argu);
      if(argu == null)
         _ret=(R)id;
      else
      {
         _ret=(R)findType(id);
         //System.out.println("Type found: "+id+" "+(String)_ret);
      }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)currentClass;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String type = (String)n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(type != "int")
         throwError();
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f1.accept(this, null);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      String type = (String)n.f1.accept(this, argu);
      if(type != "boolean")
         throwError();
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      //System.out.println((String)_ret);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
